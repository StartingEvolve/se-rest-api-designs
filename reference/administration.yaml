openapi: 3.1.0
info:
  title: administration
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
              examples:
                organization:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: zabba
                    image: 'http://example.com'
                    email: user@example.com
                    password: pa$$word
                    description: string
                    accountType: org
            application/xml:
              schema:
                type: object
                properties: {}
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
      x-internal: false
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
              examples:
                example-1:
                  value:
                    id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                    name: string
                    image: 'http://example.com'
                    email: user@example.com
                    password: pa$$word
                    description: string
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
              examples: {}
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - name
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /users:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                minItems: 5
                items:
                  $ref: '#/components/schemas/Provider'
              examples:
                example-1:
                  value:
                    - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
                      name: seiko
                      image: 'http://example.com'
                      email: user@example.com
                      password: pa$$word
                      description: string
                      accountType: org
                    - id: 497f6eca-6276-4993-bfeb-53ebbbba6f08
                      name: nani
                      image: 'http://example.com'
                      email: user@example.com
                      password: pa$$word
                      description: string
                      accountType: org
                    - id: 497f6eca-6276-4993-bfab-53cbbbba6f08
                      name: string
                      image: 'http://example.com'
                      email: user@example.com
                      password: pa$$word
                      description: string
                      accountType: org
                    - id: 497f6eca-6276-49a3-bfeb-53cbbbba6f08
                      name: abbix
                      image: 'http://example.com'
                      email: user@example.com
                      password: pa$$word
                      description: string
                      accountType: org
                    - id: 497f6eca-6276-49b3-bfeb-53cbbbba6f08
                      name: zabba
                      image: 'http://example.com'
                      email: user@example.com
                      password: pa$$word
                      description: string
                      accountType: org
      operationId: get-users
components:
  schemas:
    Provider:
      title: Provider
      type: object
      description: ''
      examples:
        - id: 497f6eca-6276-4993-bfeb-53cbbbba6f08
          name: string
          image: 'http://example.com'
          email: user@example.com
          password: pa$$word
          description: string
          accountType: org
      properties:
        id:
          type: string
          description: Unique identifier for the given user.
          format: uuid
        name:
          type: string
        image:
          type: string
          format: uri
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        description:
          type: string
        accountType:
          type: string
          enum:
            - org
            - independent
      required:
        - id
        - name
